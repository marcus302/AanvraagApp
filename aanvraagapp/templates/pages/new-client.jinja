{% extends "layouts/authenticated.jinja" %}

{% block content %}
<div class="max-w-2xl mx-auto">
    <!-- Header -->
    <div class="mb-8">
        <div class="flex items-center mb-4">
            <a href="{{ url_for('get_clients_page') }}" class="inline-flex items-center text-text-secondary hover:text-accent transition-colors mr-4">
                <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
                </svg>
                Back to Clients
            </a>
        </div>
        <h1 class="text-3xl font-bold text-text-primary mb-2">Add New Client</h1>
        <p class="text-text-secondary">Create a new client relationship</p>
    </div>

    <!-- Form -->
    <div class="bg-bg-card border border-border rounded-xl p-8">
        {% if error %}
        <div class="mb-6 p-4 bg-red-500/10 border border-red-500/20 rounded-lg">
            <div class="flex items-center">
                <svg class="w-5 h-5 text-red-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
                <span class="text-red-400">{{ error }}</span>
            </div>
        </div>
        {% endif %}

        <form method="POST" action="{{ url_for('post_new_client') }}" class="space-y-6" id="newClientForm">
            <input type="hidden" name="csrf" value="{{ csrf_token }}">
            
            <div>
                <label for="website" class="block text-sm font-medium text-text-primary mb-2">
                    Website URL <span class="text-red-400">*</span>
                </label>
                <div class="relative">
                    <input 
                        type="url" 
                        id="website" 
                        name="website" 
                        value="{{ website or '' }}"
                        placeholder="https://example.com"
                        class="w-full px-4 py-3 bg-bg-secondary border border-border rounded-lg text-text-primary placeholder-text-secondary focus:outline-none focus:ring-2 focus:ring-accent focus:border-transparent transition-all duration-200"
                        required
                        pattern="https://.*"
                        title="Please enter a valid HTTPS URL"
                    >
                    <div class="absolute inset-y-0 right-0 flex items-center pr-3">
                        <svg class="w-5 h-5 text-text-secondary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9"/>
                        </svg>
                    </div>
                </div>
                <p class="mt-2 text-sm text-text-secondary">
                    Enter the client's website URL. Must be a valid HTTPS URL.
                </p>
                <div id="urlValidation" class="mt-2 text-sm hidden">
                    <span id="urlValid" class="text-green-400 hidden">
                        <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                        </svg>
                        Valid HTTPS URL
                    </span>
                    <span id="urlInvalid" class="text-red-400 hidden">
                        <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                        </svg>
                        Please enter a valid HTTPS URL
                    </span>
                </div>
            </div>

            <div class="flex items-center justify-between pt-6 border-t border-border">
                <a href="{{ url_for('get_clients_page') }}" class="px-6 py-3 text-text-secondary hover:text-text-primary transition-colors">
                    Cancel
                </a>
                <button 
                    type="submit" 
                    id="submitBtn"
                    class="px-8 py-3 bg-accent text-bg-primary font-medium rounded-lg hover:bg-accent/90 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                    disabled
                >
                    Create Client
                </button>
            </div>
        </form>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const websiteInput = document.getElementById('website');
    const urlValidation = document.getElementById('urlValidation');
    const urlValid = document.getElementById('urlValid');
    const urlInvalid = document.getElementById('urlInvalid');
    const submitBtn = document.getElementById('submitBtn');
    const form = document.getElementById('newClientForm');

    function validateUrl(url) {
        if (!url) {
            urlValidation.classList.add('hidden');
            submitBtn.disabled = true;
            return;
        }

        // Ensure URL starts with https://
        if (!url.startsWith('https://')) {
            url = 'https://' + url;
        }

        try {
            const urlObj = new URL(url);
            const isValid = urlObj.protocol === 'https:' && urlObj.hostname.length > 0;
            
            urlValidation.classList.remove('hidden');
            
            if (isValid) {
                urlValid.classList.remove('hidden');
                urlInvalid.classList.add('hidden');
                submitBtn.disabled = false;
            } else {
                urlValid.classList.add('hidden');
                urlInvalid.classList.remove('hidden');
                submitBtn.disabled = true;
            }
        } catch (e) {
            urlValidation.classList.remove('hidden');
            urlValid.classList.add('hidden');
            urlInvalid.classList.remove('hidden');
            submitBtn.disabled = true;
        }
    }

    // Validate on input
    websiteInput.addEventListener('input', function() {
        validateUrl(this.value);
    });

    // Validate on blur
    websiteInput.addEventListener('blur', function() {
        validateUrl(this.value);
    });

    // Form submission
    form.addEventListener('submit', function(e) {
        const url = websiteInput.value.trim();
        
        if (!url) {
            e.preventDefault();
            return;
        }

        // Ensure URL starts with https:// before submission
        if (!url.startsWith('https://')) {
            websiteInput.value = 'https://' + url;
        }
    });

    // Initial validation if there's a value
    if (websiteInput.value) {
        validateUrl(websiteInput.value);
    }
});
</script>
{% endblock %} 